import { format } from 'date-fns';
import { ptBR, enUS } from 'date-fns/locale';

type Locale = 'pt-BR' | 'en-US';

interface LocaleConfig {
  dateLocale: Locale;
  currency: {
    code: string;
    symbol: string;
    format: (value: number) => string;
  };
  translations: {
    receipt: {
      title: string;
      number: string;
      saleDetails: string;
      saleNumber: string;
      date: string;
      customer: string;
      items: string;
      quantity: string;
      unitPrice: string;
      total: string;
      subtotal: string;
      discount: string;
      tax: string;
      paymentDetails: string;
      paymentMethod: string;
      amount: string;
      processedBy: string;
      verificationText: string;
      footer: {
        electronic: string;
        rights: string;
      };
    };
    paymentMethods: {
      [key: string]: string;
    };
    emails: {
      receipt: {
        subject: string;
        greeting: string;
        thankYou: string;
        verification: string;
      };
    };
  };
}

const locales: Record<Locale, LocaleConfig> = {
  'pt-BR': {
    dateLocale: ptBR,
    currency: {
      code: 'BRL',
      symbol: 'R$',
      format: (value: number) => 
        value.toLocaleString('pt-BR', { 
          style: 'currency', 
          currency: 'BRL' 
        })
    },
    translations: {
      receipt: {
        title: 'Recibo de Pagamento',
        number: 'Nº',
        saleDetails: 'Detalhes da Venda',
        saleNumber: 'Venda Nº',
        date: 'Data',
        customer: 'Cliente',
        items: 'Itens',
        quantity: 'Qtd',
        unitPrice: 'Preço Unit.',
        total: 'Total',
        subtotal: 'Subtotal',
        discount: 'Desconto',
        tax: 'Imposto',
        paymentDetails: 'Dados do Pagamento',
        paymentMethod: 'Método',
        amount: 'Valor',
        processedBy: 'Processado por',
        verificationText: 'Para verificar a autenticidade deste recibo, acesse:',
        footer: {
          electronic: 'Este é um recibo eletrônico gerado automaticamente pelo sistema ControlAI Vendas.',
          rights: 'Todos os direitos reservados.'
        }
      },
      paymentMethods: {
        CASH: 'Dinheiro',
        CREDIT_CARD: 'Cartão de Crédito',
        DEBIT_CARD: 'Cartão de Débito',
        BANK_TRANSFER: 'Transferência Bancária',
        CHECK: 'Cheque',
        PIX: 'PIX'
      },
      emails: {
        receipt: {
          subject: 'Recibo de Pagamento #{number}',
          greeting: 'Olá {customer},',
          thankYou: 'Obrigado por sua compra!',
          verification: 'Você pode verificar a autenticidade deste recibo através do link abaixo:'
        }
      }
    }
  },
  'en-US': {
    dateLocale: enUS,
    currency: {
      code: 'USD',
      symbol: '$',
      format: (value: number) => 
        value.toLocaleString('en-US', { 
          style: 'currency', 
          currency: 'USD' 
        })
    },
    translations: {
      receipt: {
        title: 'Payment Receipt',
        number: '#',
        saleDetails: 'Sale Details',
        saleNumber: 'Sale #',
        date: 'Date',
        customer: 'Customer',
        items: 'Items',
        quantity: 'Qty',
        unitPrice: 'Unit Price',
        total: 'Total',
        subtotal: 'Subtotal',
        discount: 'Discount',
        tax: 'Tax',
        paymentDetails: 'Payment Details',
        paymentMethod: 'Method',
        amount: 'Amount',
        processedBy: 'Processed by',
        verificationText: 'To verify the authenticity of this receipt, visit:',
        footer: {
          electronic: 'This is an electronic receipt automatically generated by ControlAI Sales system.',
          rights: 'All rights reserved.'
        }
      },
      paymentMethods: {
        CASH: 'Cash',
        CREDIT_CARD: 'Credit Card',
        DEBIT_CARD: 'Debit Card',
        BANK_TRANSFER: 'Bank Transfer',
        CHECK: 'Check',
        PIX: 'PIX'
      },
      emails: {
        receipt: {
          subject: 'Payment Receipt #{number}',
          greeting: 'Hello {customer},',
          thankYou: 'Thank you for your purchase!',
          verification: 'You can verify the authenticity of this receipt through the link below:'
        }
      }
    }
  }
};

export class I18nService {
  private static instance: I18nService;
  private currentLocale: Locale = 'pt-BR';

  private constructor() {}

  public static getInstance(): I18nService {
    if (!I18nService.instance) {
      I18nService.instance = new I18nService();
    }
    return I18nService.instance;
  }

  public setLocale(locale: Locale): void {
    this.currentLocale = locale;
  }

  public getLocale(): Locale {
    return this.currentLocale;
  }

  public getConfig(): LocaleConfig {
    return locales[this.currentLocale];
  }

  public formatDate(date: Date, formatStr: string): string {
    return format(date, formatStr, {
      locale: locales[this.currentLocale].dateLocale
    });
  }

  public formatCurrency(value: number): string {
    return locales[this.currentLocale].currency.format(value);
  }

  public translate(key: string, params: Record<string, string> = {}): string {
    const keys = key.split('.');
    let translation: any = locales[this.currentLocale].translations;

    for (const k of keys) {
      translation = translation[k];
      if (!translation) return key;
    }

    if (typeof translation !== 'string') return key;

    return Object.entries(params).reduce(
      (text, [param, value]) => text.replace(`{${param}}`, value),
      translation
    );
  }
} 