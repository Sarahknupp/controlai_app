import { 
  Company, 
  Branch, 
  DigitalCertificate, 
  TaxParameters,
  FiscalDocument,
  SpedFile,
  TaxObligation,
  AccountingReport,
  CertificateStatus,
  TaxObligationSummary,
  DocumentSummary,
  AccountingCode
} from '../types/accounting';

// Mock Companies
export const mockCompanies: Company[] = [
  {
    id: '1',
    cnpj: '12.345.678/0001-99',
    companyName: 'Padaria e Confeitaria Modelo LTDA',
    tradeName: 'Padaria Modelo',
    stateRegistration: '123456789',
    municipalRegistration: '987654321',
    address: {
      street: 'Rua das Flores',
      number: '123',
      complement: 'Sala 101',
      district: 'Centro',
      city: 'São Paulo',
      state: 'SP',
      zipCode: '01234-567',
      country: 'Brasil',
    },
    phone: '(11) 3456-7890',
    email: 'contato@padariamodelo.com.br',
    taxRegime: 'simples',
    economicActivity: 'Fabricação e venda de produtos de panificação',
    cnae: '1091-1/02',
    openingDate: new Date('2020-01-15'),
    accountingResponsible: 'João Contador',
    status: 'active',
    branches: [
      {
        id: '1',
        cnpj: '12.345.678/0001-99',
        tradeName: 'Padaria Modelo - Matriz',
        stateRegistration: '123456789',
        municipalRegistration: '987654321',
        address: {
          street: 'Rua das Flores',
          number: '123',
          complement: 'Sala 101',
          district: 'Centro',
          city: 'São Paulo',
          state: 'SP',
          zipCode: '01234-567',
          country: 'Brasil',
        },
        isHeadquarters: true,
      },
      {
        id: '2',
        cnpj: '12.345.678/0002-70',
        tradeName: 'Padaria Modelo - Filial 1',
        stateRegistration: '234567890',
        municipalRegistration: '876543219',
        address: {
          street: 'Avenida Paulista',
          number: '1000',
          complement: 'Loja 15',
          district: 'Bela Vista',
          city: 'São Paulo',
          state: 'SP',
          zipCode: '01310-100',
          country: 'Brasil',
        },
        isHeadquarters: false,
      }
    ],
  },
  {
    id: '2',
    cnpj: '98.765.432/0001-10',
    companyName: 'Restaurante Sabor & Cia LTDA',
    tradeName: 'Restaurante Sabor & Cia',
    stateRegistration: '876543210',
    municipalRegistration: '098765432',
    address: {
      street: 'Rua Gourmet',
      number: '456',
      district: 'Jardins',
      city: 'São Paulo',
      state: 'SP',
      zipCode: '01234-000',
      country: 'Brasil',
    },
    phone: '(11) 9876-5432',
    email: 'contato@saborecia.com.br',
    taxRegime: 'presumido',
    economicActivity: 'Restaurante e serviços de alimentação',
    cnae: '5611-2/01',
    openingDate: new Date('2018-05-10'),
    accountingResponsible: 'Maria Contadora',
    status: 'active',
    branches: [
      {
        id: '3',
        cnpj: '98.765.432/0001-10',
        tradeName: 'Restaurante Sabor & Cia - Matriz',
        stateRegistration: '876543210',
        municipalRegistration: '098765432',
        address: {
          street: 'Rua Gourmet',
          number: '456',
          district: 'Jardins',
          city: 'São Paulo',
          state: 'SP',
          zipCode: '01234-000',
          country: 'Brasil',
        },
        isHeadquarters: true,
      }
    ],
  }
];

// Mock Digital Certificates
export const mockDigitalCertificates: DigitalCertificate[] = [
  {
    id: '1',
    companyId: '1',
    serialNumber: '00:AA:BB:CC:DD:EE:FF:11:22:33',
    issuer: 'AC Certisign G7',
    validFrom: new Date('2023-01-01'),
    validTo: new Date('2024-01-01'),
    filename: 'certificado_padariamodelo.pfx',
    password: 'encrypted:********',
    status: 'valid',
    type: 'a1',
    usedFor: ['nfe', 'nfce', 'efd'],
  },
  {
    id: '2',
    companyId: '2',
    serialNumber: '11:BB:CC:DD:EE:FF:00:11:22:33',
    issuer: 'AC Serasa',
    validFrom: new Date('2023-02-15'),
    validTo: new Date('2023-12-15'),
    filename: 'certificado_saborecia.pfx',
    password: 'encrypted:********',
    status: 'valid',
    type: 'a1',
    usedFor: ['nfe', 'nfce'],
  },
  {
    id: '3',
    companyId: '1',
    serialNumber: '22:CC:DD:EE:FF:00:11:22:33:44',
    issuer: 'AC Certisign G6',
    validFrom: new Date('2022-01-01'),
    validTo: new Date('2023-01-01'),
    filename: 'certificado_antigo_padariamodelo.pfx',
    password: 'encrypted:********',
    status: 'expired',
    type: 'a1',
    usedFor: ['nfe', 'nfce'],
  },
];

// Mock Tax Parameters
export const mockTaxParameters: TaxParameters[] = [
  {
    id: '1',
    companyId: '1',
    year: 2023,
    icmsTaxRate: 18.0,
    pisRate: 0.65,
    cofinsRate: 3.0,
    issRate: 5.0,
    irrfRate: 1.5,
    csllRate: 9.0,
    inssRate: 11.0,
    icmsSTRate: 25.0,
    icmsDeferredRate: 12.0,
    ipiRates: [
      { ncm: '1905.90.90', rate: 5.0 },
      { ncm: '1905.40.00', rate: 0.0 }
    ],
    effectiveDate: new Date('2023-01-01'),
    createdBy: '1',
    createdAt: new Date('2022-12-15'),
  },
  {
    id: '2',
    companyId: '2',
    year: 2023,
    icmsTaxRate: 18.0,
    pisRate: 0.65,
    cofinsRate: 3.0,
    issRate: 3.5,
    irrfRate: 1.5,
    csllRate: 9.0,
    inssRate: 11.0,
    icmsSTRate: 20.0,
    ipiRates: [
      { ncm: '2106.90.90', rate: 8.0 }
    ],
    effectiveDate: new Date('2023-01-01'),
    createdBy: '1',
    createdAt: new Date('2022-12-20'),
  },
];

// Mock Fiscal Documents
export const mockFiscalDocuments: FiscalDocument[] = [
  {
    id: '1',
    companyId: '1',
    number: '000000001',
    serie: '1',
    type: 'nfe',
    issueDate: new Date('2023-10-15T14:30:00'),
    status: 'issued',
    customerDocument: '123.456.789-00',
    customerName: 'Cliente Final',
    totalAmount: 150.75,
    taxAmount: 27.13,
    items: [
      {
        id: '1',
        documentId: '1',
        productId: '1',
        productCode: 'PRO001',
        description: 'Pão Sourdough',
        quantity: 5,
        unitPrice: 6.99,
        totalPrice: 34.95,
        ncm: '1905.90.90',
        cfop: '5102',
        icmsBaseValue: 34.95,
        icmsValue: 6.29,
        icmsRate: 18,
        pisBaseValue: 34.95,
        pisValue: 0.23,
        pisRate: 0.65,
        cofinsBaseValue: 34.95,
        cofinsValue: 1.05,
        cofinsRate: 3,
        origin: '0',
      },
      {
        id: '2',
        documentId: '1',
        productId: '2',
        productCode: 'PRO002',
        description: 'Croissant de Chocolate',
        quantity: 10,
        unitPrice: 3.49,
        totalPrice: 34.90,
        ncm: '1905.90.90',
        cfop: '5102',
        icmsBaseValue: 34.90,
        icmsValue: 6.28,
        icmsRate: 18,
        pisBaseValue: 34.90,
        pisValue: 0.23,
        pisRate: 0.65,
        cofinsBaseValue: 34.90,
        cofinsValue: 1.05,
        cofinsRate: 3,
        origin: '0',
      },
    ],
    paymentMethod: 'credit',
    accessKey: '35231012345678000199550010000000011000000015',
    protocol: '123456789012345',
    authorizedAt: new Date('2023-10-15T14:31:00'),
    createdBy: '4',
  },
  {
    id: '2',
    companyId: '1',
    number: '000000002',
    serie: '1',
    type: 'nfe',
    issueDate: new Date('2023-10-16T10:15:00'),
    status: 'cancelled',
    customerDocument: '234.567.890-00',
    customerName: 'Maria Cliente',
    totalAmount: 75.25,
    taxAmount: 13.55,
    items: [
      {
        id: '3',
        documentId: '2',
        productId: '3',
        productCode: 'PRO003',
        description: 'Bolo de Cenoura',
        quantity: 2,
        unitPrice: 4.99,
        totalPrice: 9.98,
        ncm: '1905.90.90',
        cfop: '5102',
        icmsBaseValue: 9.98,
        icmsValue: 1.80,
        icmsRate: 18,
        pisBaseValue: 9.98,
        pisValue: 0.06,
        pisRate: 0.65,
        cofinsBaseValue: 9.98,
        cofinsValue: 0.30,
        cofinsRate: 3,
        origin: '0',
      },
    ],
    paymentMethod: 'cash',
    accessKey: '35231012345678000199550010000000021000000023',
    protocol: '123456789012346',
    authorizedAt: new Date('2023-10-16T10:16:00'),
    cancelledAt: new Date('2023-10-16T11:30:00'),
    cancelProtocol: '123456789054321',
    createdBy: '4',
    observations: 'Cliente desistiu da compra',
  },
  {
    id: '3',
    companyId: '1',
    number: '000000003',
    serie: '1',
    type: 'nfe',
    issueDate: new Date('2023-10-17T16:20:00'),
    status: 'pending',
    customerDocument: '345.678.901-00',
    customerName: 'José Comprador',
    totalAmount: 220.50,
    taxAmount: 39.69,
    items: [
      {
        id: '4',
        documentId: '3',
        productId: '4',
        productCode: 'PRO004',
        description: 'Cookie com Gotas de Chocolate',
        quantity: 20,
        unitPrice: 1.99,
        totalPrice: 39.80,
        ncm: '1905.90.90',
        cfop: '5102',
        icmsBaseValue: 39.80,
        icmsValue: 7.16,
        icmsRate: 18,
        pisBaseValue: 39.80,
        pisValue: 0.26,
        pisRate: 0.65,
        cofinsBaseValue: 39.80,
        cofinsValue: 1.19,
        cofinsRate: 3,
        origin: '0',
      },
      {
        id: '5',
        documentId: '3',
        productId: '1',
        productCode: 'PRO001',
        description: 'Pão Sourdough',
        quantity: 15,
        unitPrice: 6.99,
        totalPrice: 104.85,
        ncm: '1905.90.90',
        cfop: '5102',
        icmsBaseValue: 104.85,
        icmsValue: 18.87,
        icmsRate: 18,
        pisBaseValue: 104.85,
        pisValue: 0.68,
        pisRate: 0.65,
        cofinsBaseValue: 104.85,
        cofinsValue: 3.15,
        cofinsRate: 3,
        origin: '0',
      },
    ],
    paymentMethod: 'pix',
    createdBy: '4',
  },
];

// Mock SPED Files
export const mockSpedFiles: SpedFile[] = [
  {
    id: '1',
    companyId: '1',
    type: 'fiscal',
    reference: '2023-09',
    generationDate: new Date('2023-10-10T09:30:00'),
    status: 'transmitted',
    transmissionDate: new Date('2023-10-10T10:15:00'),
    protocol: '123456789012345',
    fileName: 'EFD_FISCAL_12345678000199_202309.txt',
    fileSize: 1540000,
    createdBy: '1',
    validationMessages: [
      {
        id: '1',
        spedFileId: '1',
        block: 'C',
        record: 'C100',
        field: '03',
        message: 'CFOP não informado para documento',
        type: 'warning',
      }
    ],
  },
  {
    id: '2',
    companyId: '1',
    type: 'contributions',
    reference: '2023-09',
    generationDate: new Date('2023-10-12T14:20:00'),
    status: 'transmitted',
    transmissionDate: new Date('2023-10-12T15:10:00'),
    protocol: '234567890123456',
    fileName: 'EFD_CONTRIB_12345678000199_202309.txt',
    fileSize: 980000,
    createdBy: '1',
  },
  {
    id: '3',
    companyId: '1',
    type: 'accounting',
    reference: '2023-09',
    generationDate: new Date('2023-10-14T10:00:00'),
    status: 'error',
    errorMessage: 'Erro na validação dos dados contábeis',
    fileName: 'ECD_12345678000199_202309.txt',
    fileSize: 2100000,
    createdBy: '1',
    validationMessages: [
      {
        id: '2',
        spedFileId: '3',
        block: 'I',
        record: 'I050',
        field: '04',
        message: 'Conta contábil inválida',
        type: 'error',
      },
      {
        id: '3',
        spedFileId: '3',
        block: 'J',
        record: 'J100',
        field: '05',
        message: 'Valor de débito não confere com saldo',
        type: 'error',
      }
    ],
  },
  {
    id: '4',
    companyId: '2',
    type: 'fiscal',
    reference: '2023-09',
    generationDate: new Date('2023-10-09T11:30:00'),
    status: 'transmitted',
    transmissionDate: new Date('2023-10-09T13:20:00'),
    protocol: '345678901234567',
    fileName: 'EFD_FISCAL_98765432000110_202309.txt',
    fileSize: 1200000,
    createdBy: '1',
  },
];

// Mock Tax Obligations
export const mockTaxObligations: TaxObligation[] = [
  {
    id: '1',
    companyId: '1',
    name: 'ICMS - Mensal',
    type: 'state',
    dueDate: new Date('2023-10-20'),
    amount: 12430.75,
    status: 'pending',
    description: 'Imposto sobre Circulação de Mercadorias e Serviços',
    reference: '2023-09',
    reminderDate: new Date('2023-10-18'),
    createdBy: '1',
  },
  {
    id: '2',
    companyId: '1',
    name: 'PIS/COFINS - Mensal',
    type: 'federal',
    dueDate: new Date('2023-10-25'),
    amount: 5320.45,
    status: 'pending',
    description: 'Contribuição para Programas de Integração Social e COFINS',
    reference: '2023-09',
    reminderDate: new Date('2023-10-23'),
    createdBy: '1',
  },
  {
    id: '3',
    companyId: '1',
    name: 'ISS - Mensal',
    type: 'municipal',
    dueDate: new Date('2023-10-15'),
    amount: 1850.30,
    status: 'paid',
    paymentDate: new Date('2023-10-14'),
    description: 'Imposto Sobre Serviços',
    reference: '2023-09',
    document: '/documentos/comprovantes/iss_202309.pdf',
    reminderDate: new Date('2023-10-13'),
    createdBy: '1',
  },
  {
    id: '4',
    companyId: '1',
    name: 'IRPJ/CSLL - Trimestral',
    type: 'federal',
    dueDate: new Date('2023-10-30'),
    amount: 15750.80,
    status: 'pending',
    description: 'Imposto de Renda Pessoa Jurídica e Contribuição Social sobre Lucro Líquido',
    reference: '2023-09',
    reminderDate: new Date('2023-10-27'),
    createdBy: '1',
  },
  {
    id: '5',
    companyId: '2',
    name: 'Simples Nacional - Mensal',
    type: 'federal',
    dueDate: new Date('2023-09-20'),
    amount: 4320.15,
    status: 'late',
    description: 'Tributo unificado para microempresas',
    reference: '2023-08',
    reminderDate: new Date('2023-09-18'),
    createdBy: '1',
  },
];

// Mock Accounting Reports
export const mockAccountingReports: AccountingReport[] = [
  {
    id: '1',
    companyId: '1',
    type: 'balance_sheet',
    name: 'Balanço Patrimonial - Setembro/2023',
    periodStart: new Date('2023-09-01'),
    periodEnd: new Date('2023-09-30'),
    generationDate: new Date('2023-10-05'),
    status: 'generated',
    filePath: '/relatorios/balanco_patrimonial_202309.pdf',
    createdBy: '1',
  },
  {
    id: '2',
    companyId: '1',
    type: 'income_statement',
    name: 'Demonstração do Resultado - Setembro/2023',
    periodStart: new Date('2023-09-01'),
    periodEnd: new Date('2023-09-30'),
    generationDate: new Date('2023-10-05'),
    status: 'generated',
    filePath: '/relatorios/dre_202309.pdf',
    createdBy: '1',
  },
  {
    id: '3',
    companyId: '1',
    type: 'cash_flow',
    name: 'Fluxo de Caixa - Setembro/2023',
    periodStart: new Date('2023-09-01'),
    periodEnd: new Date('2023-09-30'),
    generationDate: new Date('2023-10-06'),
    status: 'generated',
    filePath: '/relatorios/fluxo_caixa_202309.pdf',
    createdBy: '1',
  },
  {
    id: '4',
    companyId: '1',
    type: 'trial_balance',
    name: 'Balancete de Verificação - Setembro/2023',
    periodStart: new Date('2023-09-01'),
    periodEnd: new Date('2023-09-30'),
    generationDate: new Date('2023-10-04'),
    status: 'generated',
    filePath: '/relatorios/balancete_202309.pdf',
    createdBy: '1',
  },
  {
    id: '5',
    companyId: '2',
    type: 'balance_sheet',
    name: 'Balanço Patrimonial - Setembro/2023',
    periodStart: new Date('2023-09-01'),
    periodEnd: new Date('2023-09-30'),
    generationDate: new Date('2023-10-07'),
    status: 'error',
    createdBy: '1',
  },
];

// Mock Accounting Codes (Chart of Accounts)
export const mockAccountingCodes: AccountingCode[] = [
  {
    id: '1',
    code: '1',
    description: 'ATIVO',
    type: 'asset',
    companyId: '1',
    isActive: true,
  },
  {
    id: '2',
    code: '1.1',
    description: 'ATIVO CIRCULANTE',
    type: 'asset',
    parentId: '1',
    companyId: '1',
    isActive: true,
  },
  {
    id: '3',
    code: '1.1.1',
    description: 'DISPONÍVEL',
    type: 'asset',
    parentId: '2',
    companyId: '1',
    isActive: true,
  },
  {
    id: '4',
    code: '1.1.1.01',
    description: 'CAIXA',
    type: 'asset',
    parentId: '3',
    companyId: '1',
    isActive: true,
  },
  {
    id: '5',
    code: '1.1.1.02',
    description: 'BANCOS CONTA MOVIMENTO',
    type: 'asset',
    parentId: '3',
    companyId: '1',
    isActive: true,
  },
  {
    id: '6',
    code: '1.1.2',
    description: 'CRÉDITOS',
    type: 'asset',
    parentId: '2',
    companyId: '1',
    isActive: true,
  },
  {
    id: '7',
    code: '1.1.2.01',
    description: 'CLIENTES',
    type: 'asset',
    parentId: '6',
    companyId: '1',
    isActive: true,
  },
  {
    id: '8',
    code: '2',
    description: 'PASSIVO',
    type: 'liability',
    companyId: '1',
    isActive: true,
  },
  {
    id: '9',
    code: '2.1',
    description: 'PASSIVO CIRCULANTE',
    type: 'liability',
    parentId: '8',
    companyId: '1',
    isActive: true,
  },
  {
    id: '10',
    code: '2.1.1',
    description: 'FORNECEDORES',
    type: 'liability',
    parentId: '9',
    companyId: '1',
    isActive: true,
  },
  {
    id: '11',
    code: '3',
    description: 'PATRIMÔNIO LÍQUIDO',
    type: 'equity',
    companyId: '1',
    isActive: true,
  },
  {
    id: '12',
    code: '3.1',
    description: 'CAPITAL SOCIAL',
    type: 'equity',
    parentId: '11',
    companyId: '1',
    isActive: true,
  },
  {
    id: '13',
    code: '4',
    description: 'RECEITAS',
    type: 'revenue',
    companyId: '1',
    isActive: true,
  },
  {
    id: '14',
    code: '4.1',
    description: 'RECEITAS OPERACIONAIS',
    type: 'revenue',
    parentId: '13',
    companyId: '1',
    isActive: true,
  },
  {
    id: '15',
    code: '4.1.1',
    description: 'VENDAS DE PRODUTOS',
    type: 'revenue',
    parentId: '14',
    companyId: '1',
    isActive: true,
  },
  {
    id: '16',
    code: '5',
    description: 'CUSTOS',
    type: 'expense',
    companyId: '1',
    isActive: true,
  },
  {
    id: '17',
    code: '5.1',
    description: 'CUSTOS DOS PRODUTOS VENDIDOS',
    type: 'expense',
    parentId: '16',
    companyId: '1',
    isActive: true,
  },
  {
    id: '18',
    code: '6',
    description: 'DESPESAS',
    type: 'expense',
    companyId: '1',
    isActive: true,
  },
  {
    id: '19',
    code: '6.1',
    description: 'DESPESAS OPERACIONAIS',
    type: 'expense',
    parentId: '18',
    companyId: '1',
    isActive: true,
  },
  {
    id: '20',
    code: '6.1.1',
    description: 'DESPESAS ADMINISTRATIVAS',
    type: 'expense',
    parentId: '19',
    companyId: '1',
    isActive: true,
  },
];

// Summary Data for Dashboard
export const getCertificateStatus = (companyId: string): CertificateStatus => {
  const certificates = mockDigitalCertificates.filter(cert => cert.companyId === companyId);
  const now = new Date();
  const thirtyDaysFromNow = new Date();
  thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
  
  return {
    companyId,
    totalCertificates: certificates.length,
    validCertificates: certificates.filter(cert => cert.status === 'valid' && cert.validTo > now).length,
    expiringCertificates: certificates.filter(cert => 
      cert.status === 'valid' && cert.validTo > now && cert.validTo < thirtyDaysFromNow
    ).length,
    expiredCertificates: certificates.filter(cert => cert.status === 'expired' || cert.validTo < now).length,
  };
};

export const getTaxObligationSummary = (companyId: string): TaxObligationSummary => {
  const obligations = mockTaxObligations.filter(obl => obl.companyId === companyId);
  const pendingObligations = obligations.filter(obl => obl.status === 'pending');
  
  return {
    companyId,
    pendingObligations: pendingObligations.length,
    paidObligations: obligations.filter(obl => obl.status === 'paid').length,
    lateObligations: obligations.filter(obl => obl.status === 'late').length,
    nextDueDates: pendingObligations
      .sort((a, b) => a.dueDate.getTime() - b.dueDate.getTime())
      .slice(0, 3)
      .map(obl => ({
        name: obl.name,
        dueDate: obl.dueDate,
        amount: obl.amount,
      })),
    totalDue: pendingObligations.reduce((sum, obl) => sum + obl.amount, 0),
  };
};

export const getDocumentSummary = (companyId: string): DocumentSummary => {
  const documents = mockFiscalDocuments.filter(doc => doc.companyId === companyId);
  
  return {
    companyId,
    totalDocuments: documents.length,
    issuedDocuments: documents.filter(doc => doc.status === 'issued').length,
    cancelledDocuments: documents.filter(doc => doc.status === 'cancelled').length,
    pendingDocuments: documents.filter(doc => doc.status === 'pending').length,
    errorDocuments: documents.filter(doc => doc.status === 'denied').length,
    lastDocuments: documents
      .sort((a, b) => b.issueDate.getTime() - a.issueDate.getTime())
      .slice(0, 5)
      .map(doc => ({
        number: doc.number,
        type: doc.type.toUpperCase(),
        customerName: doc.customerName,
        totalAmount: doc.totalAmount,
        issueDate: doc.issueDate,
      })),
  };
};